simres_null_nei.2 <- results_reader("../revision/results/nei_2/sim_1_null")$data
# select variables
dt_null <- simres_null[, c(..conditions_null, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_null_0.8 <- simres_null_0.8[, c(..conditions_null, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_null_nei.2 <- simres_null_nei.2[, c(..conditions_null, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_null <- rbind(dt_null, dt_null_0.8, dt_null_nei.2)
# ----- sim 2 mean trends -----
# read data
sim_2a_mean_trend <- results_reader("../Results/sim_2a_mean_trend")$data
sim_2a_mean_trend_0.8 <- results_reader("../revision/results/propPos_0.8/sim_2a_mean_trend")$data
sim_2a_mean_trend_nei.2 <- results_reader("../revision/results/nei_2/sim_2a_mean_trend")$data
# select variables
dt_mean <- sim_2a_mean_trend[, c(..conditions_mean, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_mean_0.8 <- sim_2a_mean_trend_0.8[, c(..conditions_mean, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_mean_nei.2 <- sim_2a_mean_trend_nei.2[, c(..conditions_mean, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_mean <- rbind(dt_mean, dt_mean_0.8, dt_mean_nei.2)
# ----- sim 3 mismatch temporal -----
# read data
sim_3a_rewire_temp <- results_reader("../Results/sim_3a_rewire_temp")$data
sim_3a_rewire_temp_0.8 <- results_reader("../revision/results/propPos_0.8/sim_3a_rewire_temp")$data
sim_3a_rewire_temp_nei.2 <- results_reader("../revision/results/nei_2/sim_3a_rewire_temp")$data
# select variables
dt_rt <- sim_3a_rewire_temp[, c(..conditions_rt, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_rt_0.8 <- sim_3a_rewire_temp_0.8[, c(..conditions_rt, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_rt_nei.2 <- sim_3a_rewire_temp_nei.2[, c(..conditions_rt, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_rt <- rbind(dt_rt, dt_rt_0.8, dt_rt_nei.2)
# ----- sim 4 mismatch contemporaneous -----
# read data
sim_3b_rewire_cont <- results_reader("../Results/sim_3b_rewire_cont")$data
sim_3b_rewire_cont_0.8 <- results_reader("../revision/results/propPos_0.8/sim_3b_rewire_cont")$data
sim_3b_rewire_cont_nei.2 <- results_reader("../revision/results/nei_2/sim_3b_rewire_cont")$data
names(sim_3b_rewire_cont)[c(54, 51:53)]
# select variables
dt_rc <- sim_3b_rewire_cont[, c(..conditions_rc, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_rc_0.8 <- sim_3b_rewire_cont_0.8[, c(..conditions_rc, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_rc_nei.2 <- sim_3b_rewire_cont_nei.2[, c(..conditions_rc, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_rc <- rbind(dt_rc, dt_rc_0.8, dt_rc_nei.2)
# ----- sim 5 nonstationary temporal -----
# read data
sim_4a_nonstationary_temp <- results_reader("../Results/sim_4a_nonstationary_temp")$data
sim_4a_nonstationary_temp_0.8 <- results_reader("../revision/results/propPos_0.8/sim_4a_nonstationary_temp")$data
sim_4a_nonstationary_temp_nei.2 <- results_reader("../revision/results/nei_2/sim_4a_nonstationary_temp")$data
# select variables
dt_nt <- sim_4a_nonstationary_temp[, c(..conditions_nt, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_nt_0.8 <- sim_4a_nonstationary_temp_0.8[, c(..conditions_nt, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_nt_nei.2 <- sim_4a_nonstationary_temp_nei.2[, c(..conditions_nt, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_nt <- rbind(dt_nt, dt_nt_0.8, dt_nt_nei.2)
# ----- sim 6 nonstationary contemporaneous -----
# read data
sim_4b_nonstationary_cont <- results_reader("../Results/sim_4b_nonstationary_cont")$data
sim_4b_nonstationary_cont_0.8 <- results_reader("../revision/results/propPos_0.8/sim_4b_nonstationary_cont")$data
sim_4b_nonstationary_cont_nei.2 <- results_reader("../revision/results/nei_2/sim_4b_nonstationary_cont")$data
# select variables
dt_nc <- sim_4b_nonstationary_cont[, c(..conditions_nc, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_nc_0.8 <- sim_4b_nonstationary_cont_0.8[, c(..conditions_nc, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_nc_nei.2 <- sim_4b_nonstationary_cont_nei.2[, c(..conditions_nc, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_nc <- rbind(dt_nc, dt_nc_0.8, dt_nc_nei.2)
# save data list as RDS file
saveRDS(dt_ls, file = "simres.RDS")
runApp()
runApp()
runApp()
runApp()
# Install packages if needed:
install_if_needed <- function(pkg){
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dep = TRUE)
library(pkg, character.only = TRUE)
}
}
install_if_needed("shinythemes")
install_if_needed("shiny")
install_if_needed("ggplot2")
install_if_needed("dplyr")
install_if_needed("data.table")
install_if_needed("ggh4x")
dt <- readRDS("simres.RDS")
# options
metrics <- c("pvalue", "NFI","PNFI","TLI","RFI","IFI","RNI","CFI","RMSEA")
conditions_null <- c("n_person_factor","n_time_factor","n_node_factor")
conditions_mean <- c("mean_trend_factor","type","n_person_factor","n_time_factor","n_node_factor")
conditions_rt <- c("rewire_temporal_factor","type","n_person_factor","n_time_factor","n_node_factor")
conditions_rc <- c("rewire_contemporaneous_factor","type","n_person_factor","n_time_factor","n_node_factor")
conditions_nt <- c("rewire_temporal_factor","type","n_person_factor","n_time_factor","n_node_factor")
conditions_nc <- c("rewire_contemporaneous_factor","type","n_person_factor","n_time_factor","n_node_factor")
# boxplot function:
box_plotter <- function(simres, metric = c("NFI", "PNFI", "TLI", "NNFI", "RFI", "RNI", "IFI", "RMSEA","CFI"),
xaxis = "n_person_factor", x_facet, y_facet, color, xlab="",ylab="",legend_title="",legend.position ="right"){
# convert to longer
longer <- simres %>% tidyr::pivot_longer(NFI:RMSEA, names_to = "metric")
# indices
metric <- match.arg(metric)
# filter
sub_data <- longer[longer$metric == metric,]
title <- switch(metric,
NFI = "Bentler-Bonett Normed Fit Index (NFI)",
NNFI = "Bentler-Bonett Nonnormed Fit Index (NNFI)",
PNFI = "The Parsimony-Adjusted NFI (PNFI)",
TLI = "Tucker Lewis index (TLI)",
RFI = "Bollen's Relative Fit Index (RFI)",
IFI = "Bollen's Incremental Fit Index (IFI)",
RNI = "McDonald and Marshâ€™s Relative Noncentrality Index (RNI)",
CFI = "Bentler's Comparative Fit Index (CFI)",
RMSEA = "Root Mean Square Error of Approximation (RMSEA)")
# subtitle <-  switch(metric,
#                     NFI = "Tyical SEM interpretation: > 0.9 adequate fit, > 0.95 good fit.",
#                     NNFI = "Tyical SEM interpretation: > 0.9 adequate fit, > 0.95 good fit.",
#                     PNFI = "Tyical SEM interpretation: > 0.5 adequate fit",
#                     TLI = "Tyical SEM interpretation: > 0.9 adequate fit, > 0.95 good fit.",
#                     RFI = "Tyical SEM interpretation: > 0.9 adequate fit, > 0.95 good fit.",
#                     IFI = "Tyical SEM interpretation: > 0.9 adequate fit, > 0.95 good fit.",
#                     RNI = "Tyical SEM interpretation: > 0.9 adequate fit, > 0.95 good fit.",
#                     CFI = "Tyical SEM interpretation: > 0.9 adequate fit, > 0.95 good fit.",
#                     RMSEA = "Tyical SEM interpretation: < 0.08 adequate fit, < 0.05 good fit.")
#
line1 <-  switch(metric,
NFI = 1,
NNFI = 1,
PNFI = 1,
TLI = 1,
RFI = 1,
IFI = 1,
RNI = 1,
CFI = 1,
RMSEA = 0)
line2 <-  switch(metric,
NFI = 0.95,
NNFI = 0.95,
PNFI = 1,
TLI = 0.95,
RFI = 0.95,
IFI = 0.95,
RNI = 0.95,
CFI = 0.95,
CFI = 0.95,
RMSEA = 0.05)
line3 <-  switch(metric,
NFI = 0.9,
NNFI = 0.9,
PNFI = 0.5,
TLI = 0.9,
RFI = 0.9,
IFI = 0.9,
RNI = 0.9,
CFI = 0.9,
CFI = 0.9,
RMSEA = 0.08)
# Plot:
if (missing(x_facet)) x_facet <- "."
if (missing(y_facet)) y_facet <- ""
if (missing(color)){
AES <- aes_string(x = xaxis, y = "value")
} else {
AES <- aes_string(x = xaxis, y = "value", fill = color)
}
ggplot(sub_data, AES) +
facet_grid(as.formula(paste(y_facet,"~",x_facet)), scales = "free_y") + geom_boxplot() + theme_bw() +
# scale_y_continuous(breaks = seq(-10,10,by=0.1), minor_breaks =  seq(-10,10,by=0.1)) +
geom_hline(yintercept=line1) +
geom_hline(yintercept=line2, lty = 2) +
geom_hline(yintercept=line3, lty = 3) +
ylab(ylab) + xlab(xlab) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.25)) +
# ggtitle(title,subtitle) +
ggtitle(title) +
# guides(fill=guide_legend(title=legend_title)) +
theme(plot.title = element_text(size = 24)) +
# theme(plot.subtitle = element_text(size = 12)) +
theme(strip.text = element_text(size = 12)) +
theme(legend.text = element_text(size = 12), legend.title = element_text(size = 12)) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.1, size = 12, margin = margin(t = -15)),
panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank()) +
theme(axis.text.y = element_text(size = 12), panel.grid.major.y = element_blank()) +
geom_vline(xintercept=seq(1.5, length(unique(eval( parse(text=xaxis),envir = sub_data)))-0.5, 1),
lwd=0.5, colour="black", alpha = 0.25) +
theme(legend.position = legend.position)
}
# function to set up sliders
slider_set_up <- function(index, default_value){
sliderInput(inputId = paste0(index, "_cut"), label = index,
value = default_value, min = .01, max = .99, step = .01)
}
pacman::p_load(data.table, dplyr)
source("../helpers.R")
# variables to select
metrics <- c("pvalue", "NFI","PNFI","TLI","RFI","IFI","RNI","CFI","RMSEA")
conditions_null <- c("type","n_person_factor","n_time_factor","n_node_factor")
conditions_mean <- c("mean_trend_factor","type","n_person_factor","n_time_factor","n_node_factor")
conditions_rt <- c("rewire_temporal_factor","type","n_person_factor","n_time_factor","n_node_factor")
conditions_rc <- c("rewire_contemporaneous_factor","type","n_person_factor","n_time_factor","n_node_factor")
conditions_nt <- c("rewire_temporal_factor","type","n_person_factor","n_time_factor","n_node_factor")
conditions_nc <- c("rewire_contemporaneous_factor","type","n_person_factor","n_time_factor","n_node_factor")
# create list to store data
dt_ls <- vector("list", 6)
names(dt_ls) <- c("dt_null","dt_mean",
"dt_rt","dt_rc",
"dt_nt","dt_nc")
# ----- null condition -----
# read data
simres_null <- results_reader("../Results/sim_1_null")$data
simres_null_0.8 <- results_reader("../revision/results/propPos_0.8/sim_1_null")$data
simres_null_nei.2 <- results_reader("../revision/results/nei_2/sim_1_null")$data
# select variables
dt_null <- simres_null[, c(..conditions_null, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_null_0.8 <- simres_null_0.8[, c(..conditions_null, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_null_nei.2 <- simres_null_nei.2[, c(..conditions_null, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_null <- rbind(dt_null, dt_null_0.8, dt_null_nei.2)
# ----- sim 2 mean trends -----
# read data
sim_2a_mean_trend <- results_reader("../Results/sim_2a_mean_trend")$data
sim_2a_mean_trend_0.8 <- results_reader("../revision/results/propPos_0.8/sim_2a_mean_trend")$data
sim_2a_mean_trend_nei.2 <- results_reader("../revision/results/nei_2/sim_2a_mean_trend")$data
# select variables
dt_mean <- sim_2a_mean_trend[, c(..conditions_mean, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_mean_0.8 <- sim_2a_mean_trend_0.8[, c(..conditions_mean, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_mean_nei.2 <- sim_2a_mean_trend_nei.2[, c(..conditions_mean, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_mean <- rbind(dt_mean, dt_mean_0.8, dt_mean_nei.2)
# ----- sim 3 mismatch temporal -----
# read data
sim_3a_rewire_temp <- results_reader("../Results/sim_3a_rewire_temp")$data
sim_3a_rewire_temp_0.8 <- results_reader("../revision/results/propPos_0.8/sim_3a_rewire_temp")$data
sim_3a_rewire_temp_nei.2 <- results_reader("../revision/results/nei_2/sim_3a_rewire_temp")$data
# select variables
dt_rt <- sim_3a_rewire_temp[, c(..conditions_rt, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_rt_0.8 <- sim_3a_rewire_temp_0.8[, c(..conditions_rt, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_rt_nei.2 <- sim_3a_rewire_temp_nei.2[, c(..conditions_rt, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_rt <- rbind(dt_rt, dt_rt_0.8, dt_rt_nei.2)
# ----- sim 4 mismatch contemporaneous -----
# read data
sim_3b_rewire_cont <- results_reader("../Results/sim_3b_rewire_cont")$data
sim_3b_rewire_cont_0.8 <- results_reader("../revision/results/propPos_0.8/sim_3b_rewire_cont")$data
sim_3b_rewire_cont_nei.2 <- results_reader("../revision/results/nei_2/sim_3b_rewire_cont")$data
names(sim_3b_rewire_cont)[c(54, 51:53)]
# select variables
dt_rc <- sim_3b_rewire_cont[, c(..conditions_rc, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_rc_0.8 <- sim_3b_rewire_cont_0.8[, c(..conditions_rc, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_rc_nei.2 <- sim_3b_rewire_cont_nei.2[, c(..conditions_rc, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_rc <- rbind(dt_rc, dt_rc_0.8, dt_rc_nei.2)
# ----- sim 5 nonstationary temporal -----
# read data
sim_4a_nonstationary_temp <- results_reader("../Results/sim_4a_nonstationary_temp")$data
sim_4a_nonstationary_temp_0.8 <- results_reader("../revision/results/propPos_0.8/sim_4a_nonstationary_temp")$data
sim_4a_nonstationary_temp_nei.2 <- results_reader("../revision/results/nei_2/sim_4a_nonstationary_temp")$data
# select variables
dt_nt <- sim_4a_nonstationary_temp[, c(..conditions_nt, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_nt_0.8 <- sim_4a_nonstationary_temp_0.8[, c(..conditions_nt, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_nt_nei.2 <- sim_4a_nonstationary_temp_nei.2[, c(..conditions_nt, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_nt <- rbind(dt_nt, dt_nt_0.8, dt_nt_nei.2)
# ----- sim 6 nonstationary contemporaneous -----
# read data
sim_4b_nonstationary_cont <- results_reader("../Results/sim_4b_nonstationary_cont")$data
sim_4b_nonstationary_cont_0.8 <- results_reader("../revision/results/propPos_0.8/sim_4b_nonstationary_cont")$data
sim_4b_nonstationary_cont_nei.2 <- results_reader("../revision/results/nei_2/sim_4b_nonstationary_cont")$data
# select variables
dt_nc <- sim_4b_nonstationary_cont[, c(..conditions_nc, ..metrics)][, condition := "nei = 1 & propPos = 0.5"]
dt_nc_0.8 <- sim_4b_nonstationary_cont_0.8[, c(..conditions_nc, ..metrics)][, condition := "nei = 1 & propPos = 0.8"]
dt_nc_nei.2 <- sim_4b_nonstationary_cont_nei.2[, c(..conditions_nc, ..metrics)][, condition := "nei = 2 & propPos = 0.5"]
# merge and store in list
dt_ls$dt_nc <- rbind(dt_nc, dt_nc_0.8, dt_nc_nei.2)
# save data list as RDS file
saveRDS(dt_ls, file = "simres.RDS")
runApp()
runApp()
runApp()
conditions_ls <- list(conditions_null,
conditions_mean,
conditions_rt,
conditions_rc,
conditions_nt,
conditions_nc)
conditions_ls
names(conditions_ls) <- c("dt_null", "dt_mean", "dt_rt", "dt_rc", "dt_nt", "dt_nc")
conditions_ls
data <- dt[["dt_rt"]]
# ----- calculate rejection rates -----
rej <- data[, (sum(get("RMSEA") > .05) / .N), by = conditions_ls[["dt_rt"]]]
conditions_ls[["dt_rt"]]
# ----- calculate rejection rates -----
rej <- data[, (sum(get("RMSEA") > .05) / .N), by = c(conditions_ls[["dt_rt"]])]
rej
rmsea_cut <- .05
# ----- calculate rejection rates -----
rej <- data[, (sum(get("RMSEA") > get("rmsea_cut")) / .N), by = c(conditions_ls[["dt_rt"]])]
rej
paste0("RMSEA>", rmsea_cut)
# ----- calculate rejection rates -----
rej <- data[, paste0("RMSEA>", rmsea_cut) = (sum(get("RMSEA") > get("rmsea_cut")) / .N), by = c(conditions_ls[["dt_rt"]])]
# ----- calculate rejection rates -----
rej <- data[, (paste0("RMSEA>", rmsea_cut) = sum(get("RMSEA") > get("rmsea_cut")) / .N), by = c(conditions_ls[["dt_rt"]])]
# ----- calculate rejection rates -----
rej <- data[, .(paste0("RMSEA>", rmsea_cut) = sum(get("RMSEA") > get("rmsea_cut")) / .N), by = c(conditions_ls[["dt_rt"]])]
paste0("RMSEA>", rmsea_cut)
# ----- calculate rejection rates -----
rej <- data[, .("RMSEA>0.05" = sum(get("RMSEA") > get("rmsea_cut")) / .N), by = c(conditions_ls[["dt_rt"]])]
rej
# ----- calculate rejection rates -----
rej <- data[, .(get(paste0("RMSEA>", rmsea_cut)) = sum(get("RMSEA") > get("rmsea_cut")) / .N), by = c(conditions_ls[["dt_rt"]])]
# ----- calculate rejection rates -----
rej <- data[, (sum(get("RMSEA") > get("rmsea_cut")) / .N), by = c(conditions_ls[["dt_rt"]])]
rej
# ----- calculate rejection rates -----
rej <- data[, (RMSEA > get("rmsea_cut")) / .N), by = c(conditions_ls[["dt_rt"]])]
# ----- calculate rejection rates -----
rej <- data[, (sum(RMSEA > get("rmsea_cut")) / .N), by = c(conditions_ls[["dt_rt"]])]
rej
metrics
critical_val
critical_val <- rep(0.95, length(metrics))
critical_val
paste0(metrics, "<", critical_val)
critical_val <- c(0.05, rep(0.95, (length(metrics)-1)))
paste0(metrics, "<", critical_val)
runApp()
runApp()
runApp()
input %>% View
names(input)
grepl(names(input), pattern = "cut")
names(input)[grepl(names(input), pattern = "cut")]
names(input)[grepl(names(input), pattern = "cut")][-"RMSEA_cut"]
names(input)[grepl(names(input), pattern = "cut") & !grepl(names(input), pattern = "RMSEA")]
runApp()
runApp()
input$dt_mis_condition
data <- dt[["dt_rt"]]
input$RMSEA_cut
rej <- data[, (sum(RMSEA > input$RMSEA_cut) / .N), by = c(conditions_ls[["dt_rt"]])]
setnames(rej, "V1", "RMSEA>", input$RMSEA_cut)
setnames(rej, "V1", paste0("RMSEA>", input$RMSEA_cut))
rej
metrics
names(input)[grepl(names(input), pattern = "cut") & !grepl(names(input), pattern = "RMSEA")]
input[[names(input)[grepl(names(input), pattern = "cut") & !grepl(names(input), pattern = "RMSEA")]]]
critical_val <- input[names(input)[grepl(names(input), pattern = "cut") & !grepl(names(input), pattern = "RMSEA")]]
input
metrics
names(input)
reactiveVal()
reactiveVal(input)
c(reactiveVal(input))
vector(reactiveVal(input))
numeric(reactiveValues(input))
reactiveValues(input)
numeric(reactiveVal(input))
length(reactiveVal(input))
reactiveVal(input)
reactiveVal(input) %>% unlist
metrics
critical_val <- c(0.5, input$NFI_cut, input$PNFI_cut, input$TLI_cut,
input$RFI_cut, input$IFI_cut, input$RNI_cut, input$CFI_cut)
critical_val
metrics
critical_val <- c(0.05, input$NFI_cut, input$PNFI_cut, input$TLI_cut,
input$RFI_cut, input$IFI_cut, input$RNI_cut, input$CFI_cut)
rej_var <- paste0(metrics, "<", critical_val)
rej_var
critical_val <- c(0.05, input$NFI_cut, input$PNFI_cut, input$TLI_cut,
input$RFI_cut, input$IFI_cut, input$RNI_cut, input$CFI_cut)
rej_var <- paste0(metrics[-9], "<", critical_val)
rej_var
length(rej_var)
rej
for (i in 1:length(rej_var)) {
rej[[rej_var[i]]] <- data[, (sum(get(metrics[i]) < critical_val[i]) / .N), by = conditions][, V1]
}
critical_val
metrics
for (i in 1:length(rej_var)) {
rej[[rej_var[i]]] <- data[, (sum(get(metrics[i]) < critical_val[i]) / .N), by = conditions_ls[["dt_rt"]]][, V1]
}
for (i in 1:length(rej_var)) {
rej[[rej_var[i]]] <- data[, (sum(get(metrics[i]) < critical_val[i]) / .N), by = c(conditions_ls[["dt_rt"]])][, V1]
}
for (i in 1:length(rej_var)) {
browser()
rej[[rej_var[i]]] <- data[, (sum(get(metrics[i]) < critical_val[i]) / .N), by = c(conditions_ls[["dt_rt"]])][, V1]
}
i
rej[[rej_var[i]]] <- data[, (sum(get(metrics[i]) < critical_val[i]) / .N), by = c(conditions_ls[["dt_rt"]])][, V1]
rej
i
data <- dt_react()
rej <- data[, (sum(RMSEA > input$RMSEA_cut) / .N), by = c(conditions_ls[["dt_rt"]])]
runApp()
runApp()
data <- dt_react()
rej <- data[, (sum(RMSEA > input$RMSEA_cut) / .N), by = c(conditions_ls[[input$dt_mis_condition]])]
rej
setnames(rej, "V1", paste0("RMSEA>", input$RMSEA_cut))
critical_val <- c(0.05, input$NFI_cut, input$PNFI_cut, input$TLI_cut,
input$RFI_cut, input$IFI_cut, input$RNI_cut, input$CFI_cut)
rej_var <- paste0(metrics[-9], "<", critical_val)
rej_var
for (i in 1:length(rej_var)) {
rej[[rej_var[i]]] <- data[, (sum(get(metrics[i]) < critical_val[i]) / .N), by = c(conditions_ls[["dt_rt"]])][, V1]
}
rej
rej[[rej_var[i]]] <- data[, (sum(get(metrics[i]) < critical_val[i]) / .N), by = c(conditions_ls[["dt_rt"]])][, V1]
rej[[rej_var[i]]] <- data[, (sum(get(metrics[i]) < critical_val[i]) / .N), by = c(conditions_ls[["dt_rt"]])][, V1]
rej
rej[[rej_var[i]]] <- data[, (sum(get(metrics[i]) < critical_val[i]) / .N), by = c(conditions_ls[["dt_rt"]])][, V1]
runApp()
runApp()
rej_react
rej_react()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
for (i in 1:length(rej_var)) {
rej[[rej_var[i]]] <- data[, (sum(get(metrics[i]) < critical_val[i]) / .N), by = c(conditions_ls[[input$dt_mis_condition]])][, V1]
}
runApp()
runApp()
runApp()
runApp()
runApp()
rej
data
rej
conditions_ls[[input$dt_mis_condition]]
longer <- melt(rej,
id.vars = conditions_ls[[input$dt_mis_condition]])
longer
longer
rej_react
rej_react()
line_plotter
longer
runApp()
runApp()
line_plotter()
input$model_type
rej
longer
"dt_null" !%in% "dt_null"
"dt_null" Negate(%in%) "dt_null"
# *--- notin ---
`%!in% `<- Negate(`%in%`)
"dt_null" %!in% "dt_null"
# *--- notin ---
`%!in%` <- Negate(`%in%`)
"dt_null" %!in% "dt_null"
View(dt)
runApp()
runApp()
conditions_ls[[input$dt_mis_condition]]
runApp()
rej
rej <- rej[type == input$model_type,]
rej
# make long-format
longer <- melt(rej, id.vars = conditions_ls[[input$dt_mis_condition]])
longer
longer
rej
runApp()
rej
longer
RColorBrewer::display.brewer.all()
RColorBrewer::display.brewer.pal(9, "Paired")
rej_mean
line_plotter(data = longer,
x = "n_person_factor", y = "value", color = RColorBrewer::display.brewer.pal(9, "Paired"),
color_var = "variable", xfacet = "n_node_factor", yfacet = "n_time_factor")
line_plotter(data = longer,
x = "n_person_factor", y = "value", color = RColorBrewer::brewer.pal(9, "Paired"),
color_var = "variable", xfacet = "n_node_factor", yfacet = "n_time_factor")
runApp()
runApp()
runApp()
runApp()
runApp()
# Sample factor
factor_data <- factor(c("abc123", "def456", "ghi789"))
# Convert factor to character
char_data <- as.character(factor_data)
# Use regex to extract numeric parts
# Here we're using only the numeric characters found in each element
library(stringr)
numeric_data <- as.numeric(str_extract(char_data, "\\d+"))
# Output the numeric data
print(numeric_data)
shiny::runApp()
input$dt_mis_condition
runApp()
shiny::runApp()
runApp()
shiny::runApp()
input$dt_mis_condition_ancova
p.etasq[, Residuals := NULL][
order(-rewire_contemporaneous_factor,
n_node_factor,
n_person_factor,
n_time_factor)]
runApp()
